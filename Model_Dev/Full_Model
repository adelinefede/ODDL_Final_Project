import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
from sklearn.model_selection import train_test_split
import cv2
import numpy as np
import glob
import zipfile
path_to_zip_file = 'posture_frames.zip'
directory_to_extract_to = 'posture_dir'

with zipfile.ZipFile(path_to_zip_file, 'r') as zip_ref:
    zip_ref.extractall(directory_to_extract_to)

def load_images_from_folder(folder, image_size=(96, 96)):
    X = []
    y = []
    for filename in glob.glob(f"{folder}/*.jpg"):
        label = 0 if "good" in filename.lower() else 1
        img = cv2.imread(filename, cv2.IMREAD_GRAYSCALE)
        if img is not None:
            img = cv2.resize(img, image_size)
            X.append(img)
            y.append(label)
    return np.array(X), np.array(y)

X, y = load_images_from_folder("posture_dir")
X = X / 255.0
X = X.reshape((-1, 96, 96, 1))
print("Dataset shape:", X.shape)

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2)
model = Sequential([
    Conv2D(16, (3, 3), activation='relu', input_shape=(96, 96, 1)),
    MaxPooling2D(2, 2),
    Conv2D(32, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),
    Flatten(),
    Dense(64, activation='relu'),
    Dropout(0.3),
    Dense(1, activation='sigmoid') 
])

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.fit(X_train, y_train, epochs=20, validation_data=(X_val, y_val))

# Save pre quantized model
model.save("posture_model_pre_quant.h5")

# file size in KB
import os
size_kb = os.path.getsize("posture_model_pre_quant.h5") / 1024
print(f"Model size: {size_kb:.2f} KB")

converter = tf.lite.TFLiteConverter.from_keras_model(model)
converter.optimizations = [tf.lite.Optimize.DEFAULT]

def repre_dataset():
    for i in range(100):
        input_data = X_train[i:i+1].astype(np.float32)
        yield [input_data]

converter.optimizations = [tf.lite.Optimize.DEFAULT]
converter.representative_dataset = repre_dataset
converter.target_spec.supported_ops = [tf.lite.OpsSet.TFLITE_BUILTINS_INT8]
converter.inference_input_type = tf.uint8
converter.inference_output_type = tf.uint8


tflite_model = converter.convert()

with open("posture_model_int8.tflite", "wb") as f:
    f.write(tflite_model)

import os
size_kb = os.path.getsize("posture_model_int8.tflite") / 1024
print(f"Quantized model size: {size_kb:.2f} KB")

## in bash xxd -i model.tflite > model.h
